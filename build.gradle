plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven { url "https://maven.parchmentmc.org" }
	maven { url "https://mvn.devos.one/releases/" }
	maven { url "https://jitpack.io" }
	maven { url "https://maven.ladysnake.org/releases" }
	maven { url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" }
	maven { url "https://maven.blamejared.com/" }
	maven { url "https://modmaven.dev" }
	maven { url "https://maven.terraformersmc.com/" }
	maven { url "https://maven.vram.io/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.jamieswhiteshirt.com/libs-release" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}

	// Manual include of reach-entity-attributes because Porting-Lib:base depends on it but can't find it at its current Maven URL
	modImplementation(include("com.jamieswhiteshirt:reach-entity-attributes:2.4.0"))
	// Porting-Lib has now broken out into smaller submodules to keep the package light
	//  These are each of the specific required includes for this project. Full list here:
	//  https://github.com/Fabricators-of-Create/Porting-Lib?tab=readme-ov-file#modules
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:base:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:client_events:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:common:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:core:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:data:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:entity:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:items:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:loot:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:tags:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:transfer:${project.portinglib_version}"))
	modImplementation(include("io.github.fabricators_of_create.Porting-Lib:utility:${project.portinglib_version}"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cc_version}"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cc_version}"))
	modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.configapi_version}"
	implementation("com.electronwill.night-config:core:${project.nightconfig_version}")
	implementation("com.electronwill.night-config:toml:${project.nightconfig_version}")
	modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}")
	modCompileOnlyApi("mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}")
	//modRuntimeOnly("mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}") // comment to disable JEI
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}")
	modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}")
	modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") // comment to disable REI
	modCompileOnly("dev.emi:emi-fabric:${project.emi_version}:api")
	//modLocalRuntime("dev.emi:emi-fabric:${project.emi_version}") // comment to disable EMI
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/rootsclassic.accessWidener")

	runs {
		//
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
		//
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${modid}"

			runDir "build/datagen"
		}
	}
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
	}
}
